---
import { type RawNode } from '../../graph/nodes'

interface Node extends RawNode {
	x: number
	y: number
}

interface Props {
	node_data: RawNode[]
}
const { node_data } = Astro.props

const RADIUS = 100
const LABEL_CHAR_WIDTH = 8
const NODE_HEIGHT = 32
const EDGE_WIDTH = 3

let yMax = 0
const edges: [Node['id'], Node['id'], number][] = []
const nodes: { [id: Node['id']]: Node } = {}
node_data.forEach((node, i) => {
	const angle = (i / node_data.length) * 2 * Math.PI - Math.PI / 2
	const x = RADIUS * Math.cos(angle) + RADIUS
	const y = RADIUS * Math.sin(angle) + RADIUS + NODE_HEIGHT + EDGE_WIDTH
	yMax = Math.max(yMax, y)
	nodes[node.id] = { ...node, x, y }
	if (!node.edges) {
		return
	}
	for (const edge of node.edges) {
		edges.push([node.id, ...edge]) // u, v, w
	}
})
---

<div class="graph-container" style={`height: ${yMax}px;`}>
	<svg
		viewBox={`0 0 ${RADIUS * 2} ${yMax + NODE_HEIGHT + EDGE_WIDTH}`}
		xmlns="http://www.w3.org/2000/svg"
		style={`height: ${yMax}px;`}
	>
		{
			edges.map(([u, v, w]) => {
				const source = nodes[u]
				const target = nodes[v]
				if (!source || !target) {
					return null
				}
				const { x: sx, y: sy } = source
				const { x: tx, y: ty } = target
				return (
					<>
						<line x1={sx} y1={sy} x2={tx} y2={ty} class="edge" />
						<text x={sx / 2 + tx / 2} y={sy / 2 + ty / 2} class="edge-label">
							{w}
						</text>
					</>
				)
			})
		}
		{
			Object.values(nodes).map((node) => (
				<>
					<ellipse
						cx={node.x}
						cy={node.y}
						rx={LABEL_CHAR_WIDTH * (2.5 + node.id.length)}
						ry={NODE_HEIGHT}
						class="node"
						fill={node.color}
					/>
					<text x={node.x} y={node.y} class="node-label">
						{node.id}
					</text>
				</>
			))
		}
	</svg>
</div>
