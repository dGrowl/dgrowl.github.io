---
import { COLORS } from '../../graph/colors'

function shuffled<T>(array: T[], seed: number): T[] {
	const random = (max: number) => {
		seed = (seed * 16807) % 2147483647
		return seed % max
	}
	array = [...array]
	for (let i = array.length - 1; i > 0; i--) {
		const j = random(i + 1)
		;[array[i], array[j]] = [array[j], array[i]]
	}
	return array
}

const PADDING = 20
const y1 = 6
const y2 = 32
const faces = ['ðŸ˜ƒ', 'ðŸ¤ ', 'ðŸ˜µ', 'ðŸ˜¨', 'ðŸ˜Ž']
const colors = [
	COLORS.Red,
	COLORS.Yellow,
	COLORS.Green,
	COLORS.Blue,
	COLORS.Purple,
]
const xs: number[] = []
for (let i = 0; i < faces.length; i++) {
	xs.push(PADDING + 24 * i)
}
const xs_shuffled = shuffled(xs, 9)

faces.push(' ')
xs.push(PADDING + 24 * xs.length)
xs_shuffled.push(xs[xs.length - 1])

const items = faces.map((face, i) => {
	return {
		x1: xs[i],
		x2: xs_shuffled[i],
		color: colors[i],
		face,
	}
})
const VIEWBOX_WIDTH =
	PADDING + items.reduce((max, obj) => (obj.x1 > max ? obj.x1 : max), -Infinity)
---

<style>
	.face {
		font-size: 0.5rem;
	}
	.line {
		fill: none;
		mix-blend-mode: hard-light;
		stroke-width: 1.8;
	}
</style>

<div class="graph-container">
	<svg
		viewBox={`0 0 ${VIEWBOX_WIDTH} ${y2 + 16}`}
		xmlns="http://www.w3.org/2000/svg"
	>
		{
			items.map(({ x1, x2, color, face }) => {
				return (
					<>
						<path
							d={`
								M ${x1} ${y1}
								C ${x1} ${y2 - 2},
								  ${x2} ${y1 + 2},
								  ${x2} ${y2}
							`}
							stroke={color}
							class="line"
						/>
						<text x={x1} y={y1} class="face">
							{face}
						</text>
						<text x={x2} y={y2} class="face">
							{face}
						</text>
					</>
				)
			})
		}

		<polyline
			class="line"
			stroke="black"
			points=`
				20,${y2 + 12} 20,${y2 + 8} 20,${y2 + 12}
				68,${y2 + 12} 68,${y2 + 8} 68,${y2 + 12}
			`
		></polyline>

		<polyline
			class="line"
			stroke="black"
			points=`
				 92,${y2 + 12}  92,${y2 + 8}  92,${y2 + 12}
				140,${y2 + 12} 140,${y2 + 8} 140,${y2 + 12}
			`
		></polyline>
	</svg>
</div>
